========================================
Total Params: 71888721
Trainable Params: 71888721
Non-trainable Params: 0
========================================
LOG FORMAT | segmentation_LOSS mIoU pixAcc | depth_LOSS abs_err rel_err | normal_LOSS mean median <11.25 <22.5 <30 | TIME
loss: 6.303315162658691, losses: tensor([2.6265, 2.4021, 1.2747], device='cuda:0', grad_fn=<CopySlices>), weights: tensor([1., 1., 1.], device='cuda:0')
loss: 5.77729606628418, losses: tensor([2.5322, 2.2775, 0.9677], device='cuda:0', grad_fn=<CopySlices>), weights: tensor([1., 1., 1.], device='cuda:0')
loss: 5.728912353515625, losses: tensor([2.4375, 2.4517, 0.8397], device='cuda:0', grad_fn=<CopySlices>), weights: tensor([1., 1., 1.], device='cuda:0')
loss: 5.809711456298828, losses: tensor([2.3115, 2.6890, 0.8092], device='cuda:0', grad_fn=<CopySlices>), weights: tensor([1., 1., 1.], device='cuda:0')
loss: 5.365966320037842, losses: tensor([2.2007, 2.4221, 0.7432], device='cuda:0', grad_fn=<CopySlices>), weights: tensor([1., 1., 1.], device='cuda:0')
loss: 5.2836761474609375, losses: tensor([2.2484, 2.3447, 0.6906], device='cuda:0', grad_fn=<CopySlices>), weights: tensor([1., 1., 1.], device='cuda:0')
loss: 5.250301361083984, losses: tensor([2.0934, 2.4950, 0.6620], device='cuda:0', grad_fn=<CopySlices>), weights: tensor([1., 1., 1.], device='cuda:0')
loss: 5.210461616516113, losses: tensor([2.0743, 2.5238, 0.6123], device='cuda:0', grad_fn=<CopySlices>), weights: tensor([1., 1., 1.], device='cuda:0')
loss: 4.770509243011475, losses: tensor([1.9695, 2.1496, 0.6515], device='cuda:0', grad_fn=<CopySlices>), weights: tensor([1., 1., 1.], device='cuda:0')
loss: 4.792509078979492, losses: tensor([1.8837, 2.3793, 0.5295], device='cuda:0', grad_fn=<CopySlices>), weights: tensor([1., 1., 1.], device='cuda:0')
loss: 4.933844566345215, losses: tensor([1.9751, 2.2879, 0.6709], device='cuda:0', grad_fn=<CopySlices>), weights: tensor([1., 1., 1.], device='cuda:0')
loss: 4.963039875030518, losses: tensor([1.6899, 2.6691, 0.6040], device='cuda:0', grad_fn=<CopySlices>), weights: tensor([1., 1., 1.], device='cuda:0')
loss: 4.486631393432617, losses: tensor([1.9318, 2.0050, 0.5498], device='cuda:0', grad_fn=<CopySlices>), weights: tensor([1., 1., 1.], device='cuda:0')
loss: 5.146024703979492, losses: tensor([1.9302, 2.6507, 0.5651], device='cuda:0', grad_fn=<CopySlices>), weights: tensor([1., 1., 1.], device='cuda:0')
loss: 4.319314002990723, losses: tensor([1.8119, 1.9055, 0.6018], device='cuda:0', grad_fn=<CopySlices>), weights: tensor([1., 1., 1.], device='cuda:0')
loss: 4.207123279571533, losses: tensor([1.6536, 2.0576, 0.4960], device='cuda:0', grad_fn=<CopySlices>), weights: tensor([1., 1., 1.], device='cuda:0')
Traceback (most recent call last):
  File "examples/nyu/train_nyu.py", line 124, in <module>
    main(params)
  File "examples/nyu/train_nyu.py", line 116, in main
    NYUmodel.train(nyuv2_train_loader, nyuv2_test_loader, 200)
  File "/zhome/e0/1/158047/mdpi_robotics/LibMTL/LibMTL/trainer.py", line 210, in train
    self.meter.update(train_preds, train_gts)
  File "/zhome/e0/1/158047/mdpi_robotics/LibMTL/LibMTL/_record.py", line 42, in update
    self.metrics[task].update_fun(preds[task], gts[task])
  File "/zhome/e0/1/158047/mdpi_robotics/LibMTL/examples/nyu/utils.py", line 74, in update_fun
    error = torch.acos(torch.clamp(torch.sum(pred*gt, 1).masked_select(binary_mask), -1, 1)).detach().cpu().numpy()
KeyboardInterrupt